use aessafe;
use mac::Mac;
use poly1305;
use symmetriccipher::BlockEncryptor;

pub fn poly1305aes_clamp(kr: &mut [u8; 32]) {
    kr[19] = kr[19] & 15;  // r[3]
    kr[20] = kr[20] & 252; // r[4]
    kr[21] = kr[21] & 15;  // r[5]
    kr[23] = kr[23] & 15;  // r[7]
    kr[24] = kr[24] & 252; // r[8]
    kr[27] = kr[27] & 15;  // r[11]
    kr[28] = kr[28] & 252; // r[13]
}

pub fn poly1305aes_authenticate(kr: [u8; 32],
                                n: [u8; 16],
                                m: &[u8],
                                out: &mut [u8; 16]) {
    let k = &kr[0..16];
    let r = &kr[16..32];
    let mut pk = [0; 32];

    for i in 0..16 {
        pk[i] = r[i];
    }

    let mut aeskn = [0; 16];
    let aes_enc = aessafe::AesSafe128Encryptor::new(k);
    aes_enc.encrypt_block(&n, &mut aeskn);

    for i in 16..32 {
        pk[i] = aeskn[i-16];
    }

    let mut poly = poly1305::Poly1305::new(&pk);
    poly.input(m);
    poly.raw_result(out);
}

pub fn poly1305aes_verify(a: [u8; 16],
                          kr: [u8; 32],
                          n: [u8; 16],
                          m: &[u8]) -> bool {
    let mut out: [u8; 16] = [0; 16];
    let k = &kr[0..16];
    let r = &kr[16..32];
    let mut pk = [0; 32];

    for i in 0..16 {
        pk[i] = r[i];
    }

    let mut aeskn = [0; 16];
    let aes_enc = aessafe::AesSafe128Encryptor::new(k);
    aes_enc.encrypt_block(&n, &mut aeskn);

    for i in 16..32 {
        pk[i] = aeskn[i-16];
    }

    let mut poly = poly1305::Poly1305::new(&pk);
    poly.input(m);
    poly.raw_result(&mut out);
    a == out
}

#[cfg(test)]
mod test {
    use poly1305aes::*;
    use rand::{OsRng,Rng};

    fn bottom_two_bits_zeroed(val: u8) -> bool {
        val % 4 == 0
    }

    fn top_four_bits_zeroed(val: u8) -> bool {
        val < 16
    }

    #[test]
    fn test_clamp() {
        let mut k: [u8; 32] = [0; 32];

        let mut rng = match OsRng::new() {
            Ok(rng) => rng,
            Err(e)  => panic!("Failed to create rng! {}", e),
        };

        rng.fill_bytes(&mut k);
        poly1305aes_clamp(&mut k);

        assert!(top_four_bits_zeroed(k[19]));
        assert!(bottom_two_bits_zeroed(k[20]));
        assert!(top_four_bits_zeroed(k[21]));
        assert!(top_four_bits_zeroed(k[23]));
        assert!(bottom_two_bits_zeroed(k[24]));
        assert!(bottom_two_bits_zeroed(k[28]));
    }

    #[test]
    fn test_mine() {
        let mut kr: [u8; 32] = [0; 32];
        let m = b"This is a test";

        poly1305aes_clamp(&mut kr);

        test_poly1305aes(kr,
                         [0; 16],
                         [0x66, 0xe9, 0x4b, 0xd4, 0xef, 0x8a, 0x2c, 0x3b,
                          0x88, 0x4c, 0xfa, 0x59, 0xca, 0x34, 0x2b, 0x2e],
                         &m[..]);
    }

    #[test]
    fn test_appendix_a() {
        test_poly1305aes([0xec, 0x07, 0x4c, 0x83, 0x55, 0x80, 0x74, 0x17,
                          0x01, 0x42, 0x5b, 0x62, 0x32, 0x35, 0xad, 0xd6,
                          0x85, 0x1f, 0xc4, 0x0c, 0x34, 0x67, 0xac, 0x0b,
                          0xe0, 0x5c, 0xc2, 0x04, 0x04, 0xf3, 0xf7, 0x00],
                         [0xfb, 0x44, 0x73, 0x50, 0xc4, 0xe8, 0x68, 0xc5,
                          0x2a, 0xc3, 0x27, 0x5c, 0xf9, 0xd4, 0x32, 0x7e],
                         [0xf4, 0xc6, 0x33, 0xc3, 0x04, 0x4f, 0xc1, 0x45,
                          0xf8, 0x4f, 0x33, 0x5c, 0xb8, 0x19, 0x53, 0xde],
                         &[0xf3, 0xf6]);
        test_poly1305aes([0x75, 0xde, 0xaa, 0x25, 0xc0, 0x9f, 0x20, 0x8e,
                          0x1d, 0xc4, 0xce, 0x6b, 0x5c, 0xad, 0x3f, 0xbf,
                          0xa0, 0xf3, 0x08, 0x00, 0x00, 0xf4, 0x64, 0x00,
                          0xd0, 0xc7, 0xe9, 0x07, 0x6c, 0x83, 0x44, 0x03],
                         [0x61, 0xee, 0x09, 0x21, 0x8d, 0x29, 0xb0, 0xaa,
                          0xed, 0x7e, 0x15, 0x4a, 0x2c, 0x55, 0x09, 0xcc],
                         [0xdd, 0x3f, 0xab, 0x22, 0x51, 0xf1, 0x1a, 0xc7,
                          0x59, 0xf0, 0x88, 0x71, 0x29, 0xcc, 0x2e, 0xe7],
                         &[]);
        test_poly1305aes([0x6a, 0xcb, 0x5f, 0x61, 0xa7, 0x17, 0x6d, 0xd3,
                          0x20, 0xc5, 0xc1, 0xeb, 0x2e, 0xdc, 0xdc, 0x74,
                          0x48, 0x44, 0x3d, 0x0b, 0xb0, 0xd2, 0x11, 0x09,
                          0xc8, 0x9a, 0x10, 0x0b, 0x5c, 0xe2, 0xc2, 0x08],
                         [0xae, 0x21, 0x2a, 0x55, 0x39, 0x97, 0x29, 0x59,
                          0x5d, 0xea, 0x45, 0x8b, 0xc6, 0x21, 0xff, 0x0e],
                         [0x0e, 0xe1, 0xc1, 0x6b, 0xb7, 0x3f, 0x0f, 0x4f,
                          0xd1, 0x98, 0x81, 0x75, 0x3c, 0x01, 0xcd, 0xbe],
                         &[0x66, 0x3c, 0xea, 0x19, 0x0f, 0xfb, 0x83, 0xd8,
                           0x95, 0x93, 0xf3, 0xf4, 0x76, 0xb6, 0xbc, 0x24,
                           0xd7, 0xe6, 0x79, 0x10, 0x7e, 0xa2, 0x6a, 0xdb,
                           0x8c, 0xaf, 0x66, 0x52, 0xd0, 0x65, 0x61, 0x36]);
        test_poly1305aes([0xe1, 0xa5, 0x66, 0x8a, 0x4d, 0x5b, 0x66, 0xa5,
                          0xf6, 0x8c, 0xc5, 0x42, 0x4e, 0xd5, 0x98, 0x2d,
                          0x12, 0x97, 0x6a, 0x08, 0xc4, 0x42, 0x6d, 0x0c,
                          0xe8, 0xa8, 0x24, 0x07, 0xc4, 0xf4, 0x82, 0x07],
                         [0x9a, 0xe8, 0x31, 0xe7, 0x43, 0x97, 0x8d, 0x3a,
                          0x23, 0x52, 0x7c, 0x71, 0x28, 0x14, 0x9e, 0x3a],
                         [0x51, 0x54, 0xad, 0x0d, 0x2c, 0xb2, 0x6e, 0x01,
                          0x27, 0x4f, 0xc5, 0x11, 0x48, 0x49, 0x1f, 0x1b],
                         &[0xab, 0x08, 0x12, 0x72, 0x4a, 0x7f, 0x1e, 0x34,
                           0x27, 0x42, 0xcb, 0xed, 0x37, 0x4d, 0x94, 0xd1,
                           0x36, 0xc6, 0xb8, 0x79, 0x5d, 0x45, 0xb3, 0x81,
                           0x98, 0x30, 0xf2, 0xc0, 0x44, 0x91, 0xfa, 0xf0,
                           0x99, 0x0c, 0x62, 0xe4, 0x8b, 0x80, 0x18, 0xb2,
                           0xc3, 0xe4, 0xa0, 0xfa, 0x31, 0x34, 0xcb, 0x67,
                           0xfa, 0x83, 0xe1, 0x58, 0xc9, 0x94, 0xd9, 0x61,
                           0xc4, 0xcb, 0x21, 0x09, 0x5c, 0x1b, 0xf9]);
    }

    fn test_poly1305aes(kr: [u8; 32], n: [u8; 16], exp: [u8; 16], m: &[u8]) {
        let mut out: [u8; 16] = [0; 16];
        poly1305aes_authenticate(kr, n, m, &mut out);
        assert!(out == exp);
        assert!(poly1305aes_verify(out, kr, n, m));
    }
}
